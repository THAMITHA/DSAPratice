//positive negative for zero

Approach 1:

import java.util.* ;
import java.io.*; 
public class Solution {
	public static int getLongestSubarray(int []nums, int k) {
	 int maxLen=0;
        for(int i=0;i<nums.length;i++){
              
            for(int j=0;j<nums.length;j++){
              int sum=0;
                for(int p=i;p<=j;p++){
                    sum+=nums[p];
                    if(sum==k){
                        maxLen=Math.max(maxLen,p-i+1);
                    }
                }
            }
        }
        return maxLen;
	}
}


Approach 2:

import java.util.* ;
import java.io.*; 
public class Solution {
	public static int getLongestSubarray(int []nums, int k) {
		int maxLen=0;
		for(int i=0;i<nums.length;i++){
			int sum=0;
			for(int j=i;j<nums.length;j++){
				sum+=nums[j];
				if(sum==k){
					maxLen=Math.max(maxLen,j-i+1);
				}
			}
		}
		return maxLen;
	}

}

Approach 3:

import java.util.* ;
import java.io.*; 
public class Solution {
	public static int getLongestSubarray(int []nums, int k) {
		HashMap<Integer,Integer>perfix=new HashMap<>();
		int ans=0,sum=0;
		perfix.put(0,-1);

		for(int i=0;i<nums.length;i++){
			sum+=nums[i];
			if(perfix.containsKey(sum-k)){
				ans=Math.max(ans,i-perfix.get(sum-k));
			}
			if(!perfix.containsKey(sum)){
				perfix.put(sum,i);
			}
		}
		return ans;
	} 
}


////above for positive and zero

Approach1:
import java.util.HashMap;

public class Solution {
    public static int longestSubarrayWithSumK(int[] nums, long k) {
        HashMap<Long,Integer> prefixSums = new HashMap<>();
        long sum = 0; 
        int maxLen = 0;
        prefixSums.put(0l,-1);
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (prefixSums.containsKey(sum - k)) {
                int len = i - prefixSums.get(sum - k);
                maxLen = Math.max(maxLen, len);
            }
            if (!prefixSums.containsKey(sum)) {
                prefixSums.put(sum, i); 
            }
        }
              return maxLen;
    }
}


Approach 2:

public class Solution {
    public static int longestSubarrayWithSumK(int []a, long k) {
        int n = a.length;
        int maxLength = 0;

        int start = 0, end = -1;
        long sum = 0;
        while (start < n) {

            while ((end + 1 < n) && (sum + a[end + 1] <= k)) {
                sum += a[end + 1];
                ++end;
            }

            // We have found a subarray with the
            //  required sum.
            if (sum == k) {
                maxLength = Math.max(maxLength, end - start + 1);
            }

            // Shifting the start index
            sum -= a[start];
            ++start;
        }

        return maxLength;
    }
}
 