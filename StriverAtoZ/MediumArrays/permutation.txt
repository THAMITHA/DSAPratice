Approach 1:
class Solution {
    public void func(int[] nums,List<List<Integer>>ans,List<Integer>ds,boolean[] freq){
        if(ds.size()==nums.length){
            ans.add(new ArrayList<>(ds));
            return;
        }
        for(int i=0;i<nums.length;i++){
        if(!freq[i]){
            freq[i]=true;
            ds.add(nums[i]);
            func(nums,ans,ds,freq);
            freq[i]=false;
            ds.remove(ds.size()-1);
        }    
        }
        
    }
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>>ans=new ArrayList<>();
        List<Integer>ds=new ArrayList<>();
        boolean freq[]=new boolean[nums.length];
        func(nums,ans,ds,freq);
        return ans;
    }
}


Approach 2:

class Solution {
    private void recurPermute(int index,int[] nums,List<List<Integer>>ans){
        if(index==nums.length){
            List<Integer>ds=new ArrayList<>();
            for(int i=0;i<nums.length;i++){
                ds.add(nums[i]);
            }
            ans.add(new ArrayList<>(ds));
            return;
        }
        for(int i=index;i<nums.length;i++){
            swap(i,index,nums);
            recurPermute(index+1,nums,ans);
            swap(i,index,nums);
        }
        
    }
    private void swap(int i,int j,int[] nums){
        int t=nums[i];
        nums[i]=nums[j];
        nums[j]=t;
    }
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>>ans=new ArrayList<>();
        recurPermute(0,nums,ans);
        return ans;
    }
}