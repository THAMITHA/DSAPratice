Approach 1:

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
       List<List<Integer>>ans=new ArrayList<>();
       for(int i=0;i<nums.length-2;i++){
           for(int j=i+1;j<nums.length-1;j++){
               for(int k=j+1;k<nums.length;k++){
                   if(nums[i]+nums[j]+nums[k]==0){
                       List<Integer>temp=new ArrayList<>();
                       temp.add(nums[i]);
                       temp.add(nums[j]);
                       temp.add(nums[k]);
                       if(temp.size()!=0){
                           Collections.sort(temp);
                           if(!ans.contains(temp)){
                               ans.add(temp);
                           }
                       }
                   }
               }
           }
       }
       return ans; 
    }
}

Approach 2:

class Solution {
    public List<List<Integer>> threeSum(int[] num) {
      Arrays.sort(num);

        List < List < Integer >> res = new ArrayList < > ();

        for (int i = 0; i < num.length - 2; i++) {

            if (i == 0 || (i > 0 && num[i] != num[i - 1])) {

                int lo = i + 1, hi = num.length - 1, sum = 0 - num[i];

                while (lo < hi) {
                    if (num[lo] + num[hi] == sum) {
                        ArrayList < Integer > temp = new ArrayList < > ();
                        temp.add(num[i]);
                        temp.add(num[lo]);
                        temp.add(num[hi]);
                        res.add(temp);

                        while (lo < hi && num[lo] == num[lo + 1]) lo++;
                        while (lo < hi && num[hi] == num[hi - 1]) hi--;

                        lo++;
                        hi--;
                    } else if (num[lo] + num[hi] < sum) lo++;

                    else hi--;
                }
            }
        }
        return res;
}
}