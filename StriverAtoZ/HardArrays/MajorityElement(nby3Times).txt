Approach-1:

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer>res=new ArrayList<>();
        int n=nums.length;
        for(int i=0;i<n;i++){
            int count=0;
            for(int j=0;j<n;j++){
                if(nums[i]==nums[j]){
                    count++;
                }
            }
            if(count>(n/3) && !res.contains(nums[i])){
                res.add(nums[i]);
            }    
        }
        return res;
    }
}

Approach 2:

class Solution {
    public List<Integer> majorityElement(int[] nums) {
       int n=nums.length;
        HashMap<Integer,Integer>map=new HashMap<>();
        List<Integer>res=new ArrayList<>();
        for(int i=0;i<nums.length;i++){
            if(map.containsKey(nums[i])){
                map.put(nums[i],map.get(nums[i])+1);
            }
            if(!map.containsKey(nums[i])){
                map.put(nums[i],1);
            }
        }
        for(Map.Entry<Integer,Integer>entry:map.entrySet()){
            if(entry.getValue()>(n/3)){
                res.add(entry.getKey());
            }
        }
         return res;
    }
       
    }
