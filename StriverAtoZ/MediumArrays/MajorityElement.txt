Approach 1:

class Solution {
    public int majorityElement(int[] nums) {
       int n=nums.length,maxi=Integer.MIN_VALUE;
       for(int i=0;i<n;i++){
           int count=0;
           for(int j=0;j<n;j++){
               if(nums[i]==nums[j]){
                   count++;
               }
           }
         if(count>n/2)return nums[i]; 
        }
        return -1;
    }
}


Approach 2:

class Solution {
    public int majorityElement(int[] nums) {
        int n=nums.length;
        HashMap<Integer,Integer> map = new HashMap<>();
       
        for(int i=0;i<n;i++){
            if(map.containsKey(nums[i])){
               map.put(nums[i],map.get(nums[i])+1); 
            }
            if(!map.containsKey(nums[i])){
                map.put(nums[i],1);
            }
        }
        for(int i=0;i<n;i++){
            if(map.get(nums[i])>n/2){
                return nums[i];
            }
        }
        return -1;
    }
}



Approach 3:

class Solution {
    public int majorityElement(int[] nums) {
        int sum=0,ele=0,count=0,n=nums.length;
        for(int i=0;i<nums.length;i++){
            if(count==0){
                count=1;
                ele=nums[i];
            }
            else if(nums[i]==ele){
                count++;
            }
            else if(nums[i]!=ele){
                count--;
            }

        }
        int count1=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]==ele){
                count1++;
            }
        }
        if(count1>n/2){
            return ele;
        }
        return -1;
    }
}

Approach 

class Solution {
    public int majorityElement(int[] nums) {
        int n=nums.length;
        HashMap<Integer,Integer>map=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(map.containsKey(nums[i])){
                map.put(nums[i],map.get(nums[i])+1);
            }
            if(!map.containsKey(nums[i])){
                map.put(nums[i],1);
            }
        }

    
        for(Map.Entry<Integer,Integer>entry:map.entrySet()){
            if(entry.getValue()>(n/2)){
                return entry.getKey();
            }
        }
        // for(int i=0;i<nums.length;i++){
        //     if(map.get(nums[i])>n/2){
        //         return nums[i];
        //     }
        // }
        return -1;
    }
}