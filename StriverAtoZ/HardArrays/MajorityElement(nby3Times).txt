Approach-1:

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer>res=new ArrayList<>();
        int n=nums.length;
        for(int i=0;i<n;i++){
            int count=0;
            for(int j=0;j<n;j++){
                if(nums[i]==nums[j]){
                    count++;
                }
            }
            if(count>(n/3) && !res.contains(nums[i])){
                res.add(nums[i]);
            }    
        }
        return res;
    }
}

Tc: O(n^2)
Sc:O(1)

Approach 2:

class Solution {
    public List<Integer> majorityElement(int[] nums) {
       int n=nums.length;
        HashMap<Integer,Integer>map=new HashMap<>();
        List<Integer>res=new ArrayList<>();
        for(int i=0;i<nums.length;i++){
            if(map.containsKey(nums[i])){
                map.put(nums[i],map.get(nums[i])+1);
            }
            if(!map.containsKey(nums[i])){
                map.put(nums[i],1);
            }
        }
        for(Map.Entry<Integer,Integer>entry:map.entrySet()){
            if(entry.getValue()>(n/3)){
                res.add(entry.getKey());
            }
        }
         return res;
    }
       
    }


Tc: O(nlogn)//hashmap logn and n for traversal
Sc: O(n)//hashmap

Approach 3:

class Solution {
        public List<Integer> majorityElement(int[] nums) {
        int n=nums.length;
        int num1=-1;
        int num2=-1;
        int c1=0;
        int c2=0;
        List<Integer>ans=new ArrayList<>();
        for(int i=0;i<nums.length;i++){
            if(nums[i]==num1){
                c1++;
            }
            else if(nums[i]==num2){
                c2++;
            }
            else if(c1==0){
                num1=nums[i];
                c1=1;
            }
            else if(c2==0){
                num2=nums[i];
                c2=1;
            }
            else{
                c1--;
                c2--;
            }
        }
        c1=0;
        c2=0;
            for(int i=0;i<nums.length;i++){
                if(nums[i]==num1){
                    c1++;
                }
                else if(nums[i]==num2){
                    c2++;
                }
            }
            if(c1>n/3){
                ans.add(num1);
            }
            if(c2>n/3){
                ans.add(num2);
            }
            return ans;
        }
}
    
time complexity: O(N) +O(N)
space complexity:O(1)

Boyers Moore voting algo
-intution
	-at max 2 majority 